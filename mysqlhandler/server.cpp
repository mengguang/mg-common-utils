// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "HandlerService.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>
#include <concurrency/ThreadManager.h>
#include <concurrency/PosixThreadFactory.h>
#include <server/TThreadPoolServer.h>
#include <server/TThreadedServer.h>
#include "handler.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::apache::thrift::concurrency;
using namespace std;

using boost::shared_ptr;

class HandlerServiceHandler : virtual public HandlerServiceIf {
 public:
  HandlerServiceHandler() {
    // Your initialization goes here
  }

  void handlerRead(std::string& _return, const int32_t key) {
    // Your implementation goes here
    handler_read(key,_return);
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<HandlerServiceHandler> handler(new HandlerServiceHandler());
  shared_ptr<TProcessor> processor(new HandlerServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  //TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);

  int workerCount=16;
  shared_ptr<ThreadManager> threadManager = ThreadManager::newSimpleThreadManager(workerCount);
  shared_ptr<PosixThreadFactory> threadFactory = shared_ptr<PosixThreadFactory>(new PosixThreadFactory());
  threadManager->threadFactory(threadFactory);
  threadManager->start();
  TThreadPoolServer server(processor, serverTransport,transportFactory,protocolFactory,threadManager);

  //TThreadedServer server(processor,transportFactory,protocolFactory);

  server.serve();
  return 0;
}

